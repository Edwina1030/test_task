# -*- coding: utf-8 -*-
"""main.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12_XR87wI6jUf1A9VPqOHlEJkmni8EDsb
"""

# import relevante libraries
import torch 
import numpy as np
from torch import nn
from torchvision.datasets import mnist # get built-in dataset MNIST
from torch.utils.data import DataLoader # get iterative data
from torch.autograd import Variable # get variable
from torch import  optim
from torchvision import transforms
 
# use built-in function to download MNIST dataset 
train_set = mnist.MNIST('./data',
                        train=True, #creates datasets from training.pt
                        download=True
                        )
test_set = mnist.MNIST('./data',
                       train=False, #creates datasets from testing.pt
                       download=False
                       )
 
# Image Preprocessing in one
data_tf = transforms.Compose([transforms.ToTensor(), #transfer to Tensor type
                             transforms.Normalize([0.5],[0.5])]
                    # normalize tensor image with mean and standard deviation
                            )
 
train_set = mnist.MNIST('./data', # when local dataset is processed, change it
                        train=True,
                        transform=data_tf,
                        download=True
                        ) 
test_set = mnist.MNIST('./data', # when local dataset is processed, change it
                       train=False,
                       transform=data_tf,
                       download=True
                       )
# to get iterative data
train_data = DataLoader(train_set,
                        batch_size=64,
                        shuffle=True
                        )
test_data = DataLoader(test_set,
                       batch_size=128,
                       shuffle=False
                       )
 
# defnite model
class build_model(nn.Module):
    def __init__(self):
        super(build_model,self).__init__()
        
        self.layer1 = nn.Sequential(nn.Conv2d(in_channels = 1,
                                              out_channels = 16,
                                              kernel_size=3
                                              ), 
                                    nn.BatchNorm2d(16),
                                    nn.ReLU(inplace=True)
                                    )
        
        self.layer2 = nn.Sequential(nn.Conv2d(in_channels = 16,
                                              out_channels = 32,
                                              kernel_size=3
                                              ),
                                    nn.BatchNorm2d(32),
                                    nn.ReLU(inplace=True),
                                    nn.MaxPool2d(kernel_size=2,stride=2)
                                    ) 
        
        self.layer3 = nn.Sequential(nn.Conv2d(in_channels = 32,
                                              out_channels = 64,
                                              kernel_size=3
                                              ), 
                                    nn.BatchNorm2d(64),
                                    nn.ReLU(inplace=True)
                                    )
        
        self.layer4 = nn.Sequential(nn.Conv2d(64,128,kernel_size=3), 
                                    nn.BatchNorm2d(128),
                                    nn.ReLU(inplace=True),
                                    nn.MaxPool2d(kernel_size=2,stride=2)
                                    )  
        
        self.fc = nn.Sequential(nn.Linear(128 * 4 * 4,1024),
                                nn.ReLU(inplace=True),
                                nn.Linear(1024,128),
                                nn.ReLU(inplace=True),
                                nn.Linear(128,10)
                                )
        
    def forward(self,x):
        x = self.layer1(x)
        x = self.layer2(x)
        x = self.layer3(x)
        x = self.layer4(x)
        x = x.view(x.size(0),-1)
        x = self.fc(x)
        
        return x

model = build_model()
print(model)

criterion = nn.CrossEntropyLoss() 
optimizer = optim.SGD(model.parameters(),lr = 0.001) # may change later

nums_epoch = 1 # for first try
 
# starting traning 
losses = []
acces = []
eval_losses = []
eval_acces = []
 
for epoch in range(nums_epoch):
    train_loss = 0
    train_acc = 0
    model = model.train()
    for img , label in train_data:
        img = Variable(img)
        label = Variable(label)
        
        # Forward propagation
        out = model(img)
        loss = criterion(out,label)
        
        # Back propagation
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()
        
        # Record loss
        train_loss += loss.item()
        
        # Calculate classification acc 
        _,pred = out.max(1)
        num_correct = (pred == label).sum().item()
        acc = num_correct / img.shape[0]
       
        train_acc += acc
        
    losses.append(train_loss / len(train_data))
    acces.append(train_acc / len(train_data))
    
    eval_loss = 0
    eval_acc = 0

    # testing daset will not be trained
    for img , label in test_data:
        #img = img.reshape(img.size(0),-1)
        img = Variable(img)
        label = Variable(label)
        
        out = model(img)
        
        loss = criterion(out,label)
        
         # Record loss
        eval_loss += loss.item()
        
        _ , pred = out.max(1)
        num_correct = (pred==label).sum().item()
        acc = num_correct / img.shape[0]
        
        eval_acc += acc
    eval_losses.append(eval_loss / len(test_data))
    eval_acces.append(eval_acc / len(test_data))
    
    print('Epoch {} Training Loss {} Training  Accuracy {} Testing Loss {} Testing Accuracy {}'.format(
        epoch+1, train_loss / len(train_data),train_acc / len(train_data), eval_loss / len(test_data), eval_acc / len(test_data)))

from utils import image_processing
import os

class TorchDataset(Dataset):
  def __init__(self, filname, image_dir, resize_height = None, resize_width = None, repeat = 1):
    self.image_label_list = self.read_file(filename)
    self.image_dir = image_dir
    self.len = len(self.image_label_list)
    self.resize_height = resize_height
    self.resize_width = resize_width
    self.repeat = repeat

    # preprocessing
    self.toTensor = transforms.ToTensor()
  def __getitem__(self,i):
    index = i % self.len  # print("i={},index={}".format(i, index))
    image_name, label = self.image_label_list[index]
    image_path = os.path.join(self.image_dir, image_name)
    img = self.load_data(image_path, self.resize_height, self.resize_width, normalization=False)
    img = self.data_preproccess(img)
    label=np.array(label)
    return img, label

  def __len__(self):
        if self.repeat == None:
            data_len = 10000000
        else:
            data_len = len(self.image_label_list) * self.repeat
        return data_len

  def read_file(self, filename):
        image_label_list = []
        with open(filename, 'r') as f:
            lines = f.readlines()
            for line in lines:
                content = line.rstrip().split(';') # remove \n、\r、\t, delimiter =';'
                name = content[0]
                labels = []
                for value in content[1:]:
                    labels.append(int(value))
                image_label_list.append((name, labels))
        return image_label_list

  def load_data(self, path, resize_height, resize_width, normalization):
        '''
        load data
        :param path:
        :param resize_height:
        :param resize_width:
        :param normalization: 
        :return:
        '''
        image = image_processing.read_image(path, resize_height, resize_width, normalization)
        return image
 
    def data_preproccess(self, data):
        '''
        preprocessing
        :param data:
        :return:
        '''
        data = self.toTensor(data)
        return data

from google.colab import drive
drive.mount('/content/drive')
# if want to load file from google drive, use this path‘/content/drive/My Drive/filename’

import numpy as np
import pandas as pd
# load txt.file as array
txt2array = np.loadtxt('/content/drive/My Drive/mnist/target.txt', dtype=str, delimiter=';')
print('the content of txt file:',txt2array)
print('the shape of text file:',txt2array.shape)
print('==='*20)

# get the first column: name of images
image_name = txt2array[:,0]
print('name of all images:',image_name)
# get the second column: label of images
image_label = txt2array[:,1]
print('label of all images:',image_label)
print('==='*20)

# statistic the lables of images
image_label = pd.Series(image_label)
label_count = image_label.value_counts() # transfer type
label_count.sort_index(inplace=True)
print('satistic of image labels')
print(label_count)
print('==='*20)

# manuel split dataset into five subdataset
# to know whether images are balanced
size = 1797 // 5
image_label_subset1 = image_label[0:size-1]
image_label_subset2 = image_label[size:2*size-1]
image_label_subset3 = image_label[2*size:3*size-1]
image_label_subset4 = image_label[3*size:4*size-1]
image_label_subset5 = image_label[4*size:]
print('==='*20)

image_label_subset1 = pd.Series(image_label_subset1)
label_count_subset1 = image_label_subset1.value_counts() # transfer type
label_count_subset1.sort_index(inplace=True)
print('satistic of image labels of the 1. subset')
print(label_count_subset1)
print('==='*20)

image_label_subset2 = pd.Series(image_label_subset2)
label_count_subset2 = image_label_subset2.value_counts() # transfer type
label_count_subset2.sort_index(inplace=True)
print('satistic of image labels of the 2. subset')
print(label_count_subset2)
print('==='*20)

image_label_subset3 = pd.Series(image_label_subset3)
label_count_subset3 = image_label_subset3.value_counts() # transfer type
label_count_subset3.sort_index(inplace=True)
print('satistic of image labels of the 3. subset')
print(label_count_subset3)
print('==='*20)

image_label_subset4 = pd.Series(image_label_subset4)
label_count_subset4 = image_label_subset4.value_counts() # transfer type
label_count_subset4.sort_index(inplace=True)
print('satistic of image labels of the 4. subset')
print(label_count_subset4)
print('==='*20)

image_label_subset5 = pd.Series(image_label_subset5)
label_count_subset5 = image_label_subset5.value_counts() # transfer type
label_count_subset5.sort_index(inplace=True)
print('satistic of image labels of the 5. subset')
print(label_count_subset5)

# results shows labels of images in each subsets dispatched fast equally